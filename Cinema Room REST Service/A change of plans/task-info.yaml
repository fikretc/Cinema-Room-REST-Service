type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |+
    package cinema;

    public class Seat {
        private int row;
        private int column;


        private int price;

        Seat() {}

        Seat(int rown, int columnn, int pricen) {
            this.setRow(rown);
            this.setColumn(columnn);
            this.setPrice(pricen);
        }

        Seat(int rown, int columnn) {
            this(rown, columnn,0);
        }

        @Override
        public boolean equals(Object obj) {
            if (super.equals(obj)) {
                return true;
            }
            if(obj instanceof Seat) {
                Seat seat = (Seat)obj;
                if (this.row == seat.row && this.column == seat.column) { //price is not compared!!!
                    return true;
                }
            }
            return false;
        }

        public int getColumn() {
            return column;
        }

        public int getRow() {
            return row;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getPrice() {
            return price;
        }
        public void setPrice(int price) {
            this.price = price;
        }
    }

  learner_created: true
- name: src/cinema/TaskController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    @RestController
    public class TaskController {
        private final CinemaRoom cinemaRoom = new CinemaRoom(9,9);

        @GetMapping("/seats")
        public CinemaRoom getCinemaRoom() {
            return cinemaRoom;
        }

        @PostMapping(value = "/purchase", consumes = "application/json", produces = "application/json")
        public ResponseEntity makePurchase(@RequestBody Seat seat) {
            //seat.setPrice(cinemaRoom.seatPrice(seat.getRow()));
            if(cinemaRoom.checkParamError(seat)) {
                String invalidSeatRequest = "{\n    \"error\": \"The number of a row or a column is out of bounds!\"\n}";
                return ResponseEntity
                        .status(HttpStatus.BAD_REQUEST)
                        .body(invalidSeatRequest);
            }
            Seat foundSeat = cinemaRoom.processPurchaseRequest(seat);
            if (foundSeat != null) {
                return ResponseEntity
                        .status(HttpStatus.OK)
                        .body(foundSeat);
            }
            String purchasedSeatRequest = "{\n    \"error\": \"The ticket has been already purchased!\"\n}";
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(purchasedSeatRequest);

        }

    }
  learner_created: true
- name: src/cinema/Error.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;

    public class Error {



        private final int status;
        private final HttpStatus httpStatus;
        private final String error;

        Error(int status, HttpStatus httpStatus, String message){
            this.status = status;
            this.httpStatus = httpStatus;
            this.error = message;
        }
        public int getStatus() {
            return status;
        }

        public HttpStatus getHttpStatus() {
            return httpStatus;
        }

        public String getError() {
            return error;
        }
    }
  learner_created: true
- name: src/cinema/CinemaRoom.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.ArrayList;
    import java.util.List;

    public class CinemaRoom {
        private int total_rows;
        private int total_columns;
        private List<Seat> available_seats = new ArrayList<Seat>();
        private List<Seat> occupied_seats = new ArrayList<Seat>();

        private final int premiumRows = 5;

        public CinemaRoom() {
            total_rows =9;
            total_columns =9;
            initSeats();
        }

        public CinemaRoom(int rows, int cols){
            total_rows = rows;
            total_columns = cols;
            initSeats();
        }
        public int seatPrice(int rowNumber) {
            return (rowNumber < premiumRows) ? 10 : 8;
        }

        private void initSeats() {
            for (int i = 0; i < total_rows; i++){
                for (int j = 0; j < total_columns; j++){
                    int price = seatPrice(i+1);
                    available_seats.add(new Seat(i+1,j+1, price));

                }
            }
        }

        public boolean checkParamError(Seat seat) {
            return ((this.total_rows < seat.getRow()) || (this.total_columns < seat.getColumn())
                    || (seat.getRow() < 0) || (seat.getColumn() < 0));
        }


        public Seat processPurchaseRequest(Seat seat) {
            if (available_seats.contains(seat)) {
                seat.setPrice(seatPrice(seat.getRow()));
                occupied_seats.add(seat);
                available_seats.remove(seat);
                return seat;
            }
            return null;

        }

        public int getTotal_rows() {
            return total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }


    }
  learner_created: true
- name: src/cinema/Reservation.java
  visible: true
  learner_created: true
- name: src/cinema/ReturnedTicket.java
  visible: true
  learner_created: true
- name: src/cinema/Token.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13377#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 20 Sep 2022 13:20:22 UTC
record: 3
